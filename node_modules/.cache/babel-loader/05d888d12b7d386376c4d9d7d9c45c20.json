{"ast":null,"code":"import _objectSpread from \"/Users/susanna/apartment-hunt/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/susanna/apartment-hunt/src/context.js\";\nimport React, { Component } from \"react\";\nimport items from \"./data\";\nconst ApartmentContext = React.createContext();\nexport default class ApartmentProvider extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      apartments: [],\n      sortedApartments: [],\n      displayedApartments: [],\n      loading: true,\n      //\n      type: \"all\",\n      capacity: 1,\n      price: 0,\n      minPrice: 0,\n      maxPrice: 0,\n      minSize: 0,\n      maxSize: 0,\n      sauna: false,\n      balcony: false\n    };\n\n    this.getRoom = slug => {\n      let tempApartments = [...this.state.apartments];\n      const apartment = tempApartments.find(apartment => apartment.slug === slug);\n      return room;\n    };\n\n    this.handleChange = event => {\n      const target = event.target;\n      const value = target.type === \"checkbox\" ? target.checked : target.value;\n      const name = target.name;\n      console.log(name, value);\n      this.setState({\n        [name]: value\n      }, this.filterApartments);\n    };\n\n    this.filterApartments = () => {\n      let _this$state = this.state,\n          apartments = _this$state.apartments,\n          type = _this$state.type,\n          capacity = _this$state.capacity,\n          price = _this$state.price,\n          minSize = _this$state.minSize,\n          maxSize = _this$state.maxSize,\n          sauna = _this$state.sauna,\n          balcony = _this$state.balcony;\n      let tempApartments = [...apartments]; // transform values\n      // get capacity\n\n      capacity = parseInt(capacity);\n      price = parseInt(price); // filter by type\n\n      if (type !== \"all\") {\n        tempApartments = tempApartments.filter(apartment => apartment.type === type);\n      } // filter by capacity\n\n\n      if (capacity !== 1) {\n        tempApartments = tempApartments.filter(apartment => apartment.capacity >= capacity);\n      } // filter by price\n\n\n      tempApartments = tempApartments.filter(apartment => apartment.price <= price); //filter by size\n\n      tempApartments = tempApartments.filter(apartment => apartment.size >= minSize && apartment.size <= maxSize); //filter by sauna\n\n      if (sauna) {\n        tempApartments = tempApartments.filter(apartment => apartment.sauna === true);\n      } //filter by balcony\n\n\n      if (balcony) {\n        tempApartments = tempApartments.filter(apartment => apartment.balcony === true);\n      }\n\n      this.setState({\n        sortedApartments: tempApartments\n      });\n    };\n  }\n\n  componentDidMount() {\n    let apartments = this.formatData(items);\n    let displayedApartments = apartments.filter(apartment => apartment.displayed === true); //\n\n    let maxPrice = Math.max(...apartments.map(item => item.price));\n    let maxSize = Math.max(...apartments.map(item => item.size));\n    this.setState({\n      apartments,\n      displayedApartments,\n      sortedApartments: apartments,\n      loading: false,\n      //\n      price: maxPrice,\n      maxPrice,\n      maxSize\n    });\n  }\n\n  formatData(items) {\n    let tempItems = items.map(item => {\n      let id = item.sys.id;\n      let images = item.fields.images.map(image => image.fields.file.url);\n\n      let room = _objectSpread({}, item.fields, {\n        images,\n        id\n      });\n\n      return room;\n    });\n    return tempItems;\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(ApartmentContext.Provider, {\n      value: _objectSpread({}, this.state, {\n        getApartment: this.getApartment,\n        handleChange: this.handleChange\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 7\n      }\n    }, this.props.children);\n  }\n\n}\nconst ApartmentConsumer = ApartmentContext.Consumer;\nexport { ApartmentProvider, ApartmentConsumer, ApartmentContext };\nexport function withApartmentConsumer(Component) {\n  return function ConsumerWrapper(props) {\n    return /*#__PURE__*/React.createElement(ApartmentConsumer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 7\n      }\n    }, value => /*#__PURE__*/React.createElement(Component, Object.assign({}, props, {\n      context: value,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 19\n      }\n    })));\n  };\n}","map":{"version":3,"sources":["/Users/susanna/apartment-hunt/src/context.js"],"names":["React","Component","items","ApartmentContext","createContext","ApartmentProvider","state","apartments","sortedApartments","displayedApartments","loading","type","capacity","price","minPrice","maxPrice","minSize","maxSize","sauna","balcony","getRoom","slug","tempApartments","apartment","find","room","handleChange","event","target","value","checked","name","console","log","setState","filterApartments","parseInt","filter","size","componentDidMount","formatData","displayed","Math","max","map","item","tempItems","id","sys","images","fields","image","file","url","render","getApartment","props","children","ApartmentConsumer","Consumer","withApartmentConsumer","ConsumerWrapper"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport items from \"./data\";\n\nconst ApartmentContext = React.createContext();\n\nexport default class ApartmentProvider extends Component {\n  state = {\n    apartments: [],\n    sortedApartments: [],\n    displayedApartments: [],\n    loading: true,\n    //\n    type: \"all\",\n    capacity: 1,\n    price: 0,\n    minPrice: 0,\n    maxPrice: 0,\n    minSize: 0,\n    maxSize: 0,\n    sauna: false,\n    balcony: false\n  };\n\n  componentDidMount() {\n    let apartments = this.formatData(items);\n    let displayedApartments = apartments.filter(apartment => apartment.displayed === true);\n    //\n    let maxPrice = Math.max(...apartments.map(item => item.price));\n    let maxSize = Math.max(...apartments.map(item => item.size));\n    this.setState({\n      apartments,\n      displayedApartments,\n      sortedApartments: apartments,\n      loading: false,\n      //\n      price: maxPrice,\n      maxPrice,\n      maxSize\n    });\n  }\n\n  formatData(items) {\n    let tempItems = items.map(item => {\n      let id = item.sys.id;\n      let images = item.fields.images.map(image => image.fields.file.url);\n\n      let room = { ...item.fields, images, id };\n      return room;\n    });\n    return tempItems;\n  }\n  getRoom = slug => {\n    let tempApartments = [...this.state.apartments];\n    const apartment = tempApartments.find(apartment => apartment.slug === slug);\n    return room;\n  };\n  handleChange = event => {\n    const target = event.target;\n    const value = target.type === \"checkbox\" ? target.checked : target.value;\n    const name = target.name;\n    console.log(name, value);\n\n    this.setState(\n      {\n        [name]: value\n      },\n      this.filterApartments\n    );\n  };\n  filterApartments = () => {\n    let {\n      apartments,\n      type,\n      capacity,\n      price,\n      minSize,\n      maxSize,\n      sauna,\n      balcony\n    } = this.state;\n\n    let tempApartments = [...apartments];\n    // transform values\n    // get capacity\n    capacity = parseInt(capacity);\n    price = parseInt(price);\n    // filter by type\n    if (type !== \"all\") {\n      tempApartments = tempApartments.filter(apartment => apartment.type === type);\n    }\n    // filter by capacity\n    if (capacity !== 1) {\n      tempApartments = tempApartments.filter(apartment => apartment.capacity >= capacity);\n    }\n    // filter by price\n    tempApartments = tempApartments.filter(apartment => apartment.price <= price);\n    //filter by size\n    tempApartments = tempApartments.filter(\n      apartment => apartment.size >= minSize && apartment.size <= maxSize\n    );\n    //filter by sauna\n    if (sauna) {\n      tempApartments = tempApartments.filter(apartment => apartment.sauna === true);\n    }\n    //filter by balcony\n    if (balcony) {\n      tempApartments = tempApartments.filter(apartment => apartment.balcony === true);\n    }\n    this.setState({\n      sortedApartments: tempApartments\n    });\n  };\n  render() {\n    return (\n      <ApartmentContext.Provider\n        value={{\n          ...this.state,\n          getApartment: this.getApartment,\n          handleChange: this.handleChange\n        }}\n      >\n        {this.props.children}\n      </ApartmentContext.Provider>\n    );\n  }\n}\nconst ApartmentConsumer = ApartmentContext.Consumer;\n\nexport { ApartmentProvider, ApartmentConsumer, ApartmentContext };\n\nexport function withApartmentConsumer(Component) {\n  return function ConsumerWrapper(props) {\n    return (\n      <ApartmentConsumer>\n        {value => <Component {...props} context={value} />}\n      </ApartmentConsumer>\n    );\n  };\n}\n"]},"metadata":{},"sourceType":"module"}